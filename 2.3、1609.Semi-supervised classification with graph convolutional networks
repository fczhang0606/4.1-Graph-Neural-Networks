################################################################################################################################
################################################################################################################################
# 论文
https://arxiv.org/pdf/1609.02907.pdf

# 谱图理论
《深入浅出图神经网络》（刘忠雨）
https://www.bilibili.com/video/BV1Vw411R7Fj?p=1

# 论文理解
https://www.bilibili.com/video/BV1K5411H7EQ?p=9&vd_source=7a5fcfa8c6ae901cc39288089c7c4eb1                                                  GNN系列
https://www.bilibili.com/video/BV1Hs4y157Ls/?spm_id_from=333.788&vd_source=7a5fcfa8c6ae901cc39288089c7c4eb1            同济子豪兄
DeepShare
################################################################################################################################
################################################################################################################################
# env
conda create -n GNN_GCN
conda activate GNN_GCN

conda install python=3.8

https://pytorch.org/get-started/previous-versions/
conda install pytorch==1.8.0 torchvision==0.9.0 torchaudio==0.8.0 cudatoolkit=11.1 -c pytorch -c conda-forge
################################################################################################################################
# jupyter notebook
conda install ipykernel
conda install platformdirs
pip3 install ipywidgets
pip3 install --upgrade jupyter_core jupyter_client
################################################################################################################################
################################################################################################################################
1、DeepShare（ZZ）
################################################################################################################################
# ! pip install imageio
# ! pip install matplotlib
# ! pip install celluloid
# ! conda install ffmpeg
################################################################################################################################
import torch
import torch.nn as nn
import torch.optim as optim

import imageio
import matplotlib.pyplot as plt

from celluloid import Camera  # 电影
################################################################################################################################
class GCN(nn.Module) :


    def __init__(self, A, in_channels, out_channels) :

        super(GCN, self).__init__()

        self.A_hat = A + torch.eye(A.size(0))  # identity matrix
        self.D     = torch.diag(torch.sum(A, 1))
        self.D     = self.D.inverse().sqrt()
        self.A_hat = torch.mm(torch.mm(self.D, self.A_hat), self.D)
        # 随机张量生成，参数矩阵，可以实现特征降维
        self.W     = nn.Parameter(torch.rand(in_channels, out_channels))


    def forward(self, X) :
        out = torch.relu(torch.mm(torch.mm(self.A_hat, X), self.W))

        return out
################################################################################################################################
class Model(torch.nn.Module) :


    def __init__(self, A, nfeat, nhid, nout) :

        super(Model, self).__init__()

        self.GCN1 = GCN(A, nfeat, nhid)  # init
        self.GCN2 = GCN(A, nhid, nout)  # init


    def forward(self, X) :

        H = self.GCN1(X)
        O = self.GCN2(H)

        return O
################################################################################################################################
# karate club
A = torch.Tensor([[0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0],
                  [1,0,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0],
                  [1,1,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0],
                  [1,1,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1],
                  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                  [1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                  [0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                  [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                  [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,1],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
                  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1],
                  [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1],
                  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1],
                  [0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
                  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,1],
                  [0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,1,1,1,0,1],
                  [0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,0]])
# 34 x 34
# print(sum(sum(A - A.transpose(0, 1))))
################################################################################################################################
# print(A.size(0))  # 行数
X = torch.eye(A.size(0))  # feature matrix (one-hot)

# whats the rule
Y = torch.tensor(
    [[[ 1,  2,  3,  4],
      [ 5,  6,  7,  8],
      [ 9, 10, 11, 12]],

     [[13, 14, 15, 16],
      [17, 18, 19, 20],
      [21, 22, 23, 24]]])
# print(Y.shape)  # 2 x 3 x 4
# print(Y.size(0))  # 2
# 第X个括号里有多少，
################################################################################################################################
# 模型初始参数随机
model = Model(A, X.size(1), 10, 2)  # 输入： 34 x 10 x 2
# print(model(X))  # 输出： 34 x 2

# 半监督：头尾节点类别已知，其它节点类别未知
target = torch.tensor(
    [0 ,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
     -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1])
################################################################################################################################
# loss setup
criterion = torch.nn.CrossEntropyLoss(ignore_index=-1)  # label=-1的样本对不参与计算
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)
# loss = criterion(model(X), target)  # 34x2 与 34x1 怎么做loss?
# print(loss)


# fig setup
fig = plt.figure()
camera = Camera(fig)


for i in range(666) :  # 每次从头训练

    # 参数优化的标准流程
    optimizer.zero_grad()  # 清空优化器中的梯度
    l = model(X)  # X始终不变，参数次次变化，l变化
    loss = criterion(l, target)
    loss.backward()
    optimizer.step()  # 优化参数

    # 记录每一次中间结果
    plt.scatter(l.detach().numpy()[:, 0], l.detach().numpy()[:, 1], 
                c=[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 
                   0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])  # c=color?

    # 点打标签
    for j in range(l.shape[0]) :
        text_plot = plt.text( l[j, 0], l[j, 1], str(j+1) )

    # fig snap
    camera.snap()

    print(i)
    # record
    if i%20 == 0 :
        print("Cross Entropy Loss: =", loss.item())


# gif saved
animation = camera.animate(blit=False, interval=150)
animation.save('./train_karate_animation.gif', writer='ffmpeg', fps=60)
################################################################################################################################
################################################################################################################################
（code） 2、《深入浅出图神经网络》（刘忠雨）
################################################################################################################################

################################################################################################################################
################################################################################################################################
################################################################################################################################
