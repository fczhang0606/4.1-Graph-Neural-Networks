################################################################################################################################
论文阅读：
https://arxiv.org/pdf/1607.00653.pdf

https://www.bilibili.com/video/BV1K5411H7EQ?p=5&vd_source=26c583b46dbb1b1b34ae4743b60cf76f
https://zhuanlan.zhihu.com/p/56542707

https://www.bilibili.com/video/BV1vU4y1i77T/?spm_id_from=333.788&vd_source=26c583b46dbb1b1b34ae4743b60cf76f
################################################################################################################################


################################################################################################################################
环境搭建：
conda create -n GNN_Node2Vec
conda activate GNN_Node2Vec

conda install python=3.8

https://pytorch.org/get-started/previous-versions/
conda install pytorch==1.13.1 torchvision==0.14.1 torchaudio==0.13.1 pytorch-cuda=11.7 -c pytorch -c nvidia
################################################################################################################################
conda install ipykernel
conda install platformdirs
pip3 install ipywidgets
pip3 install --upgrade jupyter_core jupyter_client

python -m ipykernel install --user --name GNN_Node2Vec
################################################################################################################################


################################################################################################################################
代码复现：
https://www.bilibili.com/video/BV1VS4y1E7Me/?spm_id_from=333.788&vd_source=26c583b46dbb1b1b34ae4743b60cf76f
################################################################################################################################
# ! pip install networkx
# ! pip install node2vec
# ! pip install matplotlib
# ! pip install numpy
# ! pip install scikit-learn
################################################################################################################################
import networkx as nx

import matplotlib.pyplot as plt
%matplotlib inline
plt.rcParams['font.sans-serif'] = ['SimHei']  # 显示中文标签
plt.rcParams['axes.unicode_minus'] = False  # 显示负号
import numpy as np
import random
################################################################################################################################
# 《悲惨世界》人物数据集
G = nx.les_miserables_graph()
# G.nodes
# len(G)

# 可视化
plt.figure(figsize=(15, 14))
pos = nx.spring_layout(G, seed=5)
nx.draw(G, pos, with_labels=True)
plt.show()
################################################################################################################################
from node2vec import Node2Vec

node2vec = Node2Vec(
                    G,              #
                    dimensions=32,  # 嵌入维度
                    p=1,            # 回家参数
                    q=6,            # 外出参数
                    walk_length=6,  # 游走长度
                    num_walks=300,  # 游走轮数
                    workers=4       # 并行线程数
                   )

model = node2vec.fit(
                     window=3,      # Skip-Gram窗口大小
                     min_count=1,   # 忽略阈值，出现次数低于此的节点（词）
                     batch_words=4  # 每个线程处理的数据量
                    )

X = model.wv.vectors

X.shape
################################################################################################################################
# KMeans聚类
from sklearn.cluster import KMeans
cluster_labels = KMeans(n_clusters=3).fit(X).labels_
print(cluster_labels)

colors = []
nodes = list(G.nodes)
for node in nodes :
    idx = model.wv.key_to_index[str(node)]
    colors.append(cluster_labels[idx])

plt.figure(figsize=(15, 14))
pos = nx.spring_layout(G, seed=10)
nx.draw(G, pos, node_color=colors, with_labels=True)
plt.show()
################################################################################################################################
from sklearn.decomposition import PCA
pca = PCA(n_components=2)
embed_2d = pca.fit_transform(X)

# from sklearn.manifold import TSNE
# tsne = TSNE(n_components=2, n_iter=5000)
# embed_2d = tsne.fit_transform(X)

plt.figure(figsize=(15, 14))
plt.scatter(embed_2d[:, 0], embed_2d[:, 1])
plt.show()
################################################################################################################################
model.wv.get_vector('Napoleon').shape
model.wv.get_vector('Napoleon')
model.wv.most_similar('Napoleon')
model.wv.similar_by_word('Napoleon')
model.wv.similarity('Napoleon', 'Napoleon')
model.wv.similarity('Napoleon', 'Brujon')
model.wv.similarity('Napoleon', 'Champtercier')
################################################################################################################################
from node2vec.edges import HadamardEmbedder
edges_embs = HadamardEmbedder(keyed_vectors=model.wv)
edges_kv = edges_embs.as_keyed_vectors()
edges_kv.index_to_key

edges_embs[('Napoleon', 'Champtercier')]
edges_kv.most_similar(str(('Bossuet', 'Valjean')))
################################################################################################################################

